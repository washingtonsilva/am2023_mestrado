---
title: "Análise Multivariada - Aula 1 - Parte II"
title-slide-attributes:
    data-background-image: logo.jpeg
    data-background-size: contain
    data-background-opacity: "0.2"
subtitle: "Mestrado Profissional em Administração"
author: "Prof. Washington Santos da Silva"
institute: "IFMG - Campus Formiga"
date: today
date-format: long
lang: "pt"
format: 
  revealjs:
    slide-number: true
    progress: true
    transition: slide
    code-link: true
    self-contained: false
    preview-links: false
    chalkboard: true
    scrollable: true
    overview: true
    logo: logo.jpeg
editor: source
crossref:
  fig-title: '**Fig.**'
  fig-labels: arabic
  title-delim: "**.**"
bibliography: referencias.bib
csl: associacao-brasileira-de-normas-tecnicas.csl
---


# Introdução à Linguagem R
  

## R packages

- Uma das vantagens da linguagem R é sua  extensibilidade. E a forma usual 
de extender a linguagem é a programação de pacotes ou biliotecas.

- Até este momento, há Há mais de 20.000 pacotes disponíveis no 
[CRAN](https://cran.r-project.org/web/packages/available_packages_by_date.html){target="_blank"}

- R e o RStudio possuem funcionalidades para o gerenciamento de pacotes:


## R packages 

A linguagem R possui diversos comandos para o gerenciamento de 
pacotes:

- Você pode ver quais pacotes estão instalados com: `installed.packages()`

- Você pode instalar pacotes com: `install.packages("nome do pacote")`

- Você pode atualizar os pacotes instalados com `update.packages()`

- Você pode remover um pacote com `remove.packages("nome do pacote")`

- Você ativa um pacote instalado para uso com `library(packagename)` ou 
com `nome_do_pacote::nome_da_funcao_do_pacote`

Por exemplo, para instalar o pacote `dplyr`:

```{r}
#| echo: true
#| eval: false
install.packages("dplyr")
```

Podemos instalar diversos pacotes no mesmo comando:

```{r}
#| echo: true
#| eval: false
install.packages("dplyr", "skimr", "gapminder")
```

Para ativar o pacote em uma sessão fazemos:

```{r}
#| echo: true
#| eval: false
library(dplyr)
```

Uma alternativa ao comando `library()` é utilizar:

```{r}
#| echo: true
#| eval: false
dplyr::glimpse(mtcars) # o pacote deve ter sido instalado!
```

Poderíamos remover o mesmo pacote como:

```{r}
#| echo: true
#| eval: false
remove.packages("dplyr")
```


## R packages

O RStudio possui funcionalidades para o gerenciamento de pacotes no 
painel Output, na guia `Packages`:

![](img/painel_output.png")

```{r, echo = FALSE, out.width = "9l0%", fig.align = "center"}
knitr::include_graphics(path = "img/painel_output.png")
```

- Nesta guia, é possível instalar pacotes clicando em `Install` e, na janela exibida, digitar o nome do pacote ou pacotes a serem instalados, no caso de 
mais de um pacote, bastar que os nomes sejam separados por vírgula ou 
espaço.

- Nesta guia também é possível atualizar pacotes já instalados clicando 
em `Update`. É importante sempre atualizar os pacotes.

- É também possível ativar e desativar pacotes marcando ou desmarcando 
o quadro referente ao pacote.


## Usando R como uma calculadora

```{r}
#| eval: false
#| echo: true
2 + 18               # adição
2 - 18               # subtração
50821/6              # divisão
21*4                 # multiplicação
exp(10)              # função e^10
log(10)              # log natural de 10
choose(10, 8)        # comb(n,k)
factorial(100)       # !100
cos(pi)              # cosseno 
sin(pi)              # tangente 
round(pi, digits=2)  # arredondamento
```

Precedencia de operacoes:

```{r}
#| eval: false
#| echo: true
1/200*30        # (1/200)*30 - divisao tem precedencia
```

```{r}
#| eval: false
#| echo: true
1/(200*30)      # deve-se usar parenteses para definir a precedencia
```

definindo a precedencia com parênteses:

```{r}
#| eval: false
#| echo: true
(59 + 73 + 2)/3
```


## Sintáxe da linguagem: Atribuição

- Podemos criar objetos com `<-`

```{r}
#| eval: false
#| echo: true
x <- 3*4
```

- Todas as instruções R com as quais criamos objetos (declarações de atribuição) 
tem o mesmo formato:

```{r}
#| eval: false
#| echo: true
nome_objeto <- valor
```

- como ler esse código?

- >> `valor é atribuído a nome_objeto`

- Obs: `nome_objeto = valor` funciona mas não é uma boa prática!

- `x = 2` funciona, mas não é uma boa prática.


## Sintáxe da linguagem: Atribuição (cont.)

- Faremos muitas atribuições com `<-`, e não é eficiente digitar.

- Solução? 

- shortcut: `Alt + -`

- Observe que o RStudio magicamente envolve `<-` com **espaços**, que é uma boa   prática de formatação de código. 

- É terrível ler código, então **dêaosseusolhosumapausa** e use `espaços`.

- Há um contrato implícito entre nós e a linguagem R.

- R fará o cálculo tedioso para nós, mas em troca, **devemos ser completamente preciso nas instruções**. 

- `Erros de digitação` (`typos`) importam. 

- `Case` (Maiúscula/Minúscula) importa. 


## Programando em R: Boas Práticas

- nomes de objetos devem começar com uma letra e podem conter `letras`, 
  `números`, `_` e `.`
  
- Queremos nomes de objetos **descritivos**, então precisamos de uma 
  convenção (`code style`).
  

```{r}
#| eval: false
#| echo: true
i_use_snake_case
OtherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

### Guias de Estilo

- [Google’s R Style Guide](https://google.github.io/styleguide/Rguide.html){target="_blank"}

- [Tidyverse Style Guide](https://style.tidyverse.org/){target="_blank"}

    - Este guia fornece várias diretrizes para se trabalhar com código em R e 
      em outras linguagens.


## Funções em R

- R tem uma grande coleção de funções internas que são executadas como a 
seguinte sintaxe:

```{r}
#| eval: false
#| echo: true
function_name(arg1 = val1, arg2 = val2, ...)
```

- Exemplos com a função `seq()`

```{r}
#| eval: false
#| echo: true
y <- seq(1, 10, length.out = 5)
y
```

- Exemplos de *autocompletion* com `TAB` 

para que o resultado seja exibido diretamente envolva toda a expressão entre 
parênteses:

```{r}
#| eval: false
#| echo: true
(y <- seq(1, 10, length.out = 5))
```




# Tipos de Dados (Atômicos)

## Principais Tipos

                  Descrição    
-----------       ---------------------------------------------  
`double`          a vector containing real values
`integer`         a vector containing integer values
`character`       a vector containing character values
`logical`         a vector containing logical values
`complex`         a vector containing complex values              


## Tipos Especiais

                  Descrição    
-----------       ---------------------------------------------  
`NA`              `Not Available`: dados faltantes
`NaN`             `Not a Number`: 0/0 
`Inf`             $+ \infty$ ou $- \infty$

               
## Documentação: Definições daLinguagem R 

[R Language Definition](https://cran.r-project.org/doc/manuals/r-release/R-lang.html){target="_blank"} 




# Estruturas de Dados


## Estruturas de Dados: Visão Geral

```{r fig1, out.width = "80%", fig.align = 'center'}
knitr::include_graphics("img/struct.png")
```


## Factors: `forcats` package

```{r fig2, out.width = "20%", fig.align = 'center'}
knitr::include_graphics("img/forcats.png")
```

Encorajo vocês a explorararem o pacotte `forcats`:

[forcats website](https://forcats.tidyverse.org/){target="_blank"}




# Manipulando dados com o pacote dplyr

## Data Frames: Manipulação com o pacote `dplyr`

- O pacote [`dplyr`](https://dplyr.tidyverse.org/){target="_blank"} pertence a um metapacote (família de pacotes) projetado especificamente para Ciência dos Dados chamado [Tidyverse](https://www.tidyverse.org/){target="_blank"}. 

- Alguns desses pacotes serão abordados ao longo deste curso, mas você pode encontrar informações mais completas em: [https://www.tidyverse.org/](https://www.tidyverse.org/){target="_blank"}.

- o pacote `dplyr` é uma gramática de manipulação de dados. 

- O pacote fornece um conjunto consistente de **verbos** que ajudam a resolver os    desafios mais comuns de manipulação de dados.


## Pacote `dplyr`: Principais Verbos

Verbos            Descrição    
-----------       -------------------------------------------------------------
`select()`        picks variables based on their names.
`filter()`        picks cases based on their values.
`mutate()`        adds new variables that are functions of existing variables
`arrange()`       changes the ordering of the rows
`summarise()`     reduces multiple values down to a single summary.
`group_by()`      allows you to perform any operation “by group”


## Tutorial sobre o Pacote `dplyr`

- Para demonstrar o uso dos verbos, vamos utilizar os dados denominados 
`gapminder` que estão disponíveis no próprio pacote `gapminder`.


## Pacote `dplyr`: Verbos

```{r fig-verbos, out.width = "90%", fig.align = 'center'}
knitr::include_graphics("img/dplyr.png")
```


## Pacote `dplyr`: `group_by()` e `summarise()`

```{r fig-gs, out.width = "55%", fig.align = 'center'}
knitr::include_graphics("img/gs.png")
```




# Dicas


## Dica: Cancelando comandos

- Caso voce tenha enviado código para execução a partir do painel 
`Source` e por alguma razão você desejar cancelar a execução, 
basta apertar a tecla **ESC**.

- Se você estiver executando código no console interativo, Você precisa usar <kbd>**Ctrl**</kbd>\+<kbd>**C**</kbd> ao invés de <kbd>**Esc**</kbd> para 
cancelar o comando.

- Cancelar um comando não é útil apenas para finalizar comandos incompletos. 

- Você também pode usá-lo para dizer ao R parar de executar o código (por exemplo, se o código estiver levando muito tempo para ser executado).


## Dica: Warnings vs Errors

Preste atenção quando R fizer algo inesperado. 

- **Errors**: são exibidos quando R não pode prosseguir com uma 
operação. 

- **Warnings**: são exibidas, geralmente, quando uma operação foi executada, mas provavelmente não funcionou como esperado.

- Em ambos os casos, a mensagem que R exibe pelo mnenos tenta lhe dar 
pistas sobre o problema.



## Referência Adicional

- Rapp, Albert. **Yet Again: R + Data Science**. Disponível em: [https://yards.albert-rapp.de/index.html](https://yards.albert-rapp.de/index.html){target="_blank"}



